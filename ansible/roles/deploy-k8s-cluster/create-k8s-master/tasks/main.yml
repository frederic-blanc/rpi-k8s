---
- name: Ensures files/generated dir exists on controller
  file: 
      path:         "files/generated"
      state:        directory
  delegate_to:      localhost
  
- name: Generate local private key (2048 bits, RSA)
  openssl_privatekey:
    path:           "files/generated/{{ domain_name }}.key"
    type:           RSA
    size:           2048
  delegate_to:      localhost
  
- name: Generate local csr
  openssl_csr:
    path:                       "files/generated/{{ domain_name }}.csr"
    privatekey_path:            "files/generated/{{ domain_name }}.key"
    common_name:                "{{ certificate_authority.CN }}"
    state_or_province_name:     "{{ certificate_authority.ST }}"
    organization_name:          "{{ certificate_authority.O }}"
    organizational_unit_name:   "{{ certificate_authority.OU }}"
    useCommonNameForSAN:        false
    basicConstraints:
    - CA:TRUE
  delegate_to:      localhost
  
- name: Generate local Self Signed Certificate Authority
  openssl_certificate:
    path:                       "files/generated/{{ domain_name }}.crt"
    csr_path:                   "files/generated/{{ domain_name }}.csr"
    privatekey_path:            "files/generated/{{ domain_name }}.key"
    provider:                   "selfsigned"
    selfsigned_digest:          "sha256"
  delegate_to:      localhost
  
- name: Ensures /etc/kubernetes/pki dir exists
  file:
    path:           "/etc/kubernetes/pki"
    state:          directory
    owner:          root
    group:          root
    mode:           '0755'
  become:           true
  
- name: Copy key to /etc/kubernetes/pki
  copy:
    src:            "files/generated/{{ domain_name }}.key"
    dest:           "/etc/kubernetes/pki/ca.key"
    owner:          root
    group:          root
    mode:           '0400'
  become:           true
  
- name: Copy certificate to /etc/kubernetes/pki
  copy:
    src:            "files/generated/{{ domain_name }}.crt"
    dest:           "/etc/kubernetes/pki/ca.crt"
    owner:          root
    group:          root
    mode:           '0444'
  become:           true
  
- name: Ensures /root/k8s dir exists on controller
  file:
    path:           "/root/k8s"
    state:          directory
    owner:          root
    group:          root
    mode:           '0755'
  become:           true
  
- name: kubernetes with flannel network plugin installation
  block:
  - name: create temporary folder
    tempfile:
      state:        directory
      suffix:       flannel
    register:       flannel_tmp_dir
    changed_when:   false
    
  - name: download latest flannel pod network version
    get_url:
      url:          "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
      dest:         "{{ flannel_tmp_dir.path }}/k8s-network-plugin-flannel.yml"
      force:        true
    changed_when:   false
    
  - name: copy flannel plugin file to /root/k8s
    copy: 
      remote_src:   yes
      src:          "{{ flannel_tmp_dir.path }}/k8s-network-plugin-flannel.yml"
      dest:         "/root/k8s"
      owner:        root
      group:        root
      mode:         '0644'
    
  - name: Initialize the Kubernetes cluster using kubeadm
    shell:          "kubeadm init --apiserver-advertise-address='{{ ansible_default_ipv4.address }}' --node-name '{{ hostname }}' --cert-dir '/etc/kubernetes/pki' --pod-network-cidr='{{ k8s.flannel.cidr }}'"
    
  - name: Install flannel pod network
    shell:          "kubectl apply -f '/root/k8s/k8s-network-plugin-flannel.yml' --kubeconfig '/etc/kubernetes/admin.conf'"
    
  always:
  - name: delete temporary folder
    file:
      path:         "{{ flannel_tmp_dir.path }}"
      state:        absent
    when:           flannel_tmp_dir is defined
    changed_when:   false
  
  become:           true
  when:             k8s.network_plugin == 'flannel'

- name: kubernetes with weave   network plugin installation
  block:
  - name: create temporary folder
    tempfile:
      state:        directory
      suffix:       weave
    register:       weave_tmp_dir
    changed_when:   false
    
  - name: get kubectl version
    shell:          "kubectl version | base64 | tr -d '\n'"
    register:       kubectl_version
    changed_when:   false
    
  - name: download latest weave pod network version
    get_url:
      url:          "https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout }}&env.WEAVE_MTU=8912"
      dest:         "{{ weave_tmp_dir.path }}/k8s-network-plugin-weave.yml"
      force:        true
    changed_when:   false
    
  - name: copy weave file to /root/k8s
    copy:
      remote_src:   yes
      src:          "{{ weave_tmp_dir.path }}/k8s-network-plugin-weave.yml"
      dest:         "/root/k8s"
      owner:        root
      group:        root
      mode:         '0644'
    
  - name: Initialize the Kubernetes cluster using kubeadm
    shell:          "kubeadm init --apiserver-advertise-address='{{ ansible_default_ipv4.address }}' --node-name '{{ hostname }}' --cert-dir '/etc/kubernetes/pki'"
    
  - name: Install weave pod network
    shell:          "kubectl apply -f '/root/k8s/k8s-network-plugin-weave.yml' --kubeconfig '/etc/kubernetes/admin.conf'"
    
  always:
  - name: delete temporary folder
    file:
      path:         "{{ weave_tmp_dir.path }}"
      state:        absent
    when:           weave_tmp_dir is defined
    changed_when:   false
  
  become:           true
  when:             k8s.network_plugin == 'weave'

- name: kubernetes with calico  network plugin installation
  block:
  - name: create temporary folder
    tempfile:
      state:        directory
      suffix:       calico
    register:       calico_tmp_dir
    changed_when:   false
    
  - name: download latest calico pod network version
    get_url:
      url:          "https://docs.projectcalico.org/manifests/calico.yaml"
      dest:         "{{ calico_tmp_dir.path }}/k8s-network-plugin-calico.yml"
      force:        true
    changed_when:   false
    
  - name: copy calico file to /root/k8s
    copy:
      remote_src:   yes
      src:          "{{ calico_tmp_dir.path }}/k8s-network-plugin-calico.yml"
      dest:         "/root/k8s/k8s-network-plugin-calico.yml"
      owner:        root
      group:        root
      mode:         '0644'
      
  - name: ensure /etc/NetworkManager/conf.d exists
    file:
      dest:         /etc/NetworkManager/conf.d
      state:        directory
      owner:        root
      group:        root
      mode:         '0755'
    
  - name: Create networking exception for calico
    copy:
      dest:         "/etc/NetworkManager/conf.d/calico.conf"
      content:  |
        [keyfile]
        unmanaged-devices=interface-name:cali*;interface-name:tunl*
      owner:        root
      group:        root
      mode:         '0644'
    register:       networking_exception_for_calico
    
  - name: restart service networkd
    systemd:
      name:         systemd-networkd
      state:        restarted
    when:           networking_exception_for_calico is changed
    
  - name: Initialize the Kubernetes cluster using kubeadm
    shell:          "kubeadm init --apiserver-advertise-address='{{ ansible_default_ipv4.address }}' --node-name '{{ hostname }}' --cert-dir '/etc/kubernetes/pki' --pod-network-cidr='{{ k8s.calico.cidr }}'"
    
  - name: Install calico pod network
    shell:          "kubectl apply -f '/root/k8s/k8s-network-plugin-calico.yml' --kubeconfig '/etc/kubernetes/admin.conf'"
    
  always:
  - name: delete temporary folder
    file:
      path:         "{{ calico_tmp_dir.path }}"
      state:        absent
    when:           calico_tmp_dir is defined
    changed_when:   false
  
  become:           true
  when:             k8s.network_plugin == 'calico'

- name: Ensures .kube dir exists for root
  file: 
    path:           "/root/.kube"
    state:          directory
    owner:          root
    group:          root
    mode:           '0700'
  become:           true
  
- name: copy kube config to root
  copy:
    src:            "/etc/kubernetes/admin.conf"
    dest:           "/root/.kube/config"
    owner:          root
    group:          root
    mode:           '0400'
    remote_src:     yes
  become:           true
  
- name: Ensures .kube dir exists for users
  file: 
    path:           "/home/{{ item.name }}/.kube"
    state:          directory
    owner:          "{{ item.name }}"
    group:          "{{ item.name }}"
    mode:           '0700'
  with_items:       "{{ work_users }}"
  become:           true
  
- name: copy kube config to users
  copy:
    src:            /etc/kubernetes/admin.conf
    dest:           "/home/{{ item.name }}/.kube/config"
    owner:          "{{ item.name }}"
    group:          "{{ item.name }}"
    mode:           '0400'
    remote_src:     yes
  with_items:       "{{ work_users }}"
  become:           true
  
- name: Generate join command
  command:          "kubeadm token create --print-join-command"
  register:         join_command
  become:           true
  
- name: declare attach_self command in dummy host
  add_host:
    name:               "dummy"
    attach_self_cmd:    "{{ join_command.stdout_lines[0] }}" 
  