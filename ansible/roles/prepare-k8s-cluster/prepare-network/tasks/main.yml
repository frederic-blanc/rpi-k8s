---
# disable IPV6
- name: ensure /boot/firmware/nobtcmd.txt exist
  copy:
    content: ""
    dest:  /boot/firmware/nobtcmd.txt
    force: no
    owner: root
    group: root
    mode:  '0644'
  become: true
  
- name: check nobtcmd ipv6.disable=1
  shell: (tr -s '[:space:]+ ' '\n' < /boot/firmware/nobtcmd.txt ) | grep -qq '^ipv6.disable=1$'
  register: cmdline_ipv6_disable
  failed_when:  false
  changed_when: false
  
- name: add   nobtcmd ipv6.disable_1 if needed
  shell: "{{ item }}"
  args:
    warn: false
  when: cmdline_ipv6_disable.rc != 0
  with_items:
  - cp -pf /boot/firmware/nobtcmd.txt /tmp/nobtcmd.txt
  - (tr -s '[:space:]+ ' '\n' < /tmp/nobtcmd.txt | sed '/^ipv6.disable=.*$/d;' ; printf "\nipv6.disable=1\n" ) | tr -s '\n' ' ' | sed 's/^\s*//; s/\s*$//' > /boot/firmware/nobtcmd.txt
  - rm -f /tmp/nobtcmd.txt
  become: true
  
- name: comment ipv6 hosts lines
  replace: 
    path:   /etc/hosts
    regexp: '^((?!#).*::[0-9].*)$'
    replace: '#\1'
  become: true
  
# set hostname and FQDN
- name: set hostname
  hostname:
    name: "{{ hostname }}"
  become: true
  
- name: add hotname and fqdn to /etc/hosts
  blockinfile:
    path: /etc/hosts
    block: |
      127.0.1.1       {{ fqdn }} {{ hostname }}
      {{ ansible_eth0.ipv4.address }}    {{ fqdn }} {{ hostname }}
  become: true
  
# set static IP
- name: install netplan config file
  template:
    src:    50-eth0-ansible.yaml.j2
    dest:   /etc/netplan/50-eth0-ansible.yaml
    owner:  root
    group:  root
    mode:   '0644'
  register: netplan_eth0_ansible
  become:   true
  
- name: remove old cloud-init netplan config file
  file:
    path:   /etc/netplan/50-cloud-init.yaml
    state:  absent
  register: netplan_cloud_init
  become:   true
  
- name: apply netplan change
  shell:    "netplan apply"
  when: netplan_eth0_ansible.changed or netplan_cloud_init.changed
  become: true
  
- name: restart service networkd
  systemd:
    state: restarted
    name:  systemd-networkd
  when: netplan_eth0_ansible.changed or netplan_cloud_init.changed
  become: true
  
- name: ensure that nobtcmd.txt cmdline is used
  lineinfile:
    path:   /boot/firmware/config.txt
    regexp: '^cmdline='
    line:   "cmdline=nobtcmd.txt"
  become: true
  
- name: ensure that nobtcmd.txt cmdline is used
  lineinfile:
    path:   /boot/firmware/syscfg.txt
    regexp: '^include '
    line:   "include nobtcfg.txt"
  become: true
  
- name: check  nobtcmd ip
  shell: (tr -s '[:space:]+ ' '\n' < /boot/firmware/nobtcmd.txt ) | grep -qq '^ip=.*$'
  register: cmdline_ip
  failed_when:  false
  changed_when: false
  
- name: remove nobtcmd ip if needed
  shell: "{{ item }}"
  args:
    warn: false
  when: cmdline_ip.rc == 0
  with_items:
  - cp -pf /boot/firmware/nobtcmd.txt /tmp/nobtcmd.txt
  - (tr -s '[:space:]+ ' '\n' < /tmp/nobtcmd.txt | sed '/^ip\=.*$/d;') | tr -s '\n' ' ' | sed 's/^\s*//; s/\s*$//' > /boot/firmware/nobtcmd.txt
  - rm -f /tmp/nobtcmd.txt
  become: true
  
# disable wifi and bluetooth
- name: stop and disable services
  systemd:
    name:       "{{ item }}"
    state:      stopped
    enabled:    false
  with_items:
  - "wpa_supplicant.service"
  become: true
  
- name: ensure /boot/firmware/nobtcfg.txt exist
  copy:
    content: "[all]"
    dest:  /boot/firmware/nobtcfg.txt
    force: no
    owner: root
    group: root
    mode:  '0644'
  become: true
  
- name: add module bt and wifi to disable list
  blockinfile:
    path: /boot/firmware/nobtcfg.txt
    insertafter: "[all]"
    block: |
      dtoverlay=disable-wifi
      dtoverlay=disable-bt
  register: config_wifi_bt
  become: true
  
# reboot if needed
- name: reboot on change
  reboot:
  when: cmdline_ipv6_disable.rc != 0 or cmdline_ip.rc == 0 or config_wifi_bt.changed
  become: true
  
