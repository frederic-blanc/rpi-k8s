---
# docker service must be started
- name: start service docker
  systemd:
    state: started
    name:  docker
  become: true
  
# Install k8s repository
- name: Install package to manage access to https repositories
  apt:
    name:  "{{ packages }}"
    state:  present
    update_cache: yes
    autoremove: yes
    force_apt_get: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - gnupg-agent
    - software-properties-common
  become: true
  
- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  become: true
  
- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ {{ k8s.repository.version }} {{ k8s.repository.channel }}
    state: present
    filename: kubernetes.list
  become: true
  
## disable swap
## seem to be already disabled (by docker install perhaps) or not installed
#- name: stop service dphys-swapfile
#  systemd:
#    state: stopped
#    name:  dphys-swapfile
#  become: true
#
#- name: uninstall swap
#  shell: dphys-swapfile swapoff && dphys-swapfile uninstall
#  when:  ansible_swaptotal_mb > 0
#  become: true
#  
#- name: disable service dphys-swapfile
#  systemd:
#    enabled: no
#    name:  dphys-swapfile
#  become: true
  
# install network tweak for debian
- name: Install network dependencies packages
  apt:
    name:           "{{ packages }}"
    state:          present
    update_cache:   yes
    autoremove:     yes
    force_apt_get:  yes
  vars:
    packages:
    - conntrack
    - iptables
    - ebtables
    - arptables
    - ethtool
    - socat
  register:         network_dependencies
  become:           true
  
## after ubuntu 19.0X only
#- name: use __tables-legacy (needed for the network plugin to work on debian:buster)
#  alternatives:
#    name: "{{ item }}"
#    path: "/usr/sbin/{{ item }}-legacy"
#  with_items:
#  - "iptables"
#  - "ip6tables"
#  - "arptables"
#  - "ebtables"
#  register: __tables_legacy
#  become: true
  
- name: set net.bridge.bridge-nf-call-iptables to 1 (needed for network plugins)
  sysctl:
    name:       net.bridge.bridge-nf-call-iptables
    value:      "1"
    state:      present
    sysctl_set: yes
  register:     bridge_nf_call_iptables
  become:       true
  
## Kubeproxy change it at run with a calculated value
#- name: set net.netfilter.nf_conntrack_max to 1000000 (needed for network plugins)
#  sysctl:
#    name:       "net.netfilter.nf_conntrack_max"
#    value:      "1000000"
#    state:      present
#    sysctl_set: yes
#  register:     net_netfilter_nf_conntrack_max_sysctl
#  become:       true
#  
#- name: set net.netfilter.nf_conntrack_max to 1000000 in conf.d (needed for network plugins)
#  copy:
#    dest:     "/etc/sysctl.d/10-nf_conntrack.conf"
#    content:  |
#      net.netfilter.nf_conntrack_max=1000000
#    owner:      root
#    group:      root
#    mode:       '0644'
#  register:     net_netfilter_nf_conntrack_max_sysctl_confd
#  become:       true
#  
#- name: set nf_conntrack modules load (needed for network plugins)
#  lineinfile:
#    line:       "nf_conntrack"
#    path:       "/etc/modules"
#    owner:      root
#    group:      root
#    mode:       '0644'
#  register:     nf_conntrack_module
#  become:       true
#  
#- name: reboot on change
#  reboot:
#  when: nf_conntrack_module.changed
#  become: true
  
- name: reload systemd-sysctl if needed
  systemd:
    name:       "systemd-sysctl.service"
    state:      restarted
  when:         bridge_nf_call_iptables.changed #or net_netfilter_nf_conntrack_max_sysctl.changed or net_netfilter_nf_conntrack_max_sysctl_confd.changed
  become:       true
  
- name: Install Kubernetes binaries
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
    autoremove: yes
    force_apt_get: yes
  vars:
    packages:
      - cri-tools
      - kubelet
      - kubeadm
      - kubectl
      - kubernetes-cni
  notify:
  - kubelet status
  become: true
  
- name: Configure default kubelet ip
  lineinfile:
    path:   "/etc/default/kubelet"
    line:   "KUBELET_EXTRA_ARGS='--node-ip={{ ansible_default_ipv4.address }} --cgroup-driver={{ docker.cgroupdriver }}'"
    create: yes
  register: kubelet_default
  become: true
  
- name: restart service kubelet
  systemd:
    state: restarted
    daemon_reload: yes
    name:  kubelet
  when: kubelet_default.changed
  notify:
  - kubelet status
  become: true
  
- name: ensure service kubelet is started and enable
  systemd:
    name:    kubelet
    state:   started
    enabled: yes
  notify:
  - kubelet status
  become: true
  