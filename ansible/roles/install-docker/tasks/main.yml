---
# activate cgroup
- name: ensure /boot/cmdline.txt exist
  copy:
    content: ""
    dest:  /boot/cmdline.txt
    force: no
    owner: root
    group: root
    mode:  '0644'
  become: true
  
- name: check cmdline cgroup_enable=cpuset
  shell: (tr -s '[:space:]+ ' '\n' < /boot/cmdline.txt ) | grep -qq '^cgroup_enable=cpuset$'
  register: cgroup_enable_cpuset
  failed_when:  false
  changed_when: false
  
- name: check cmdline cgroup_enable=memory
  shell: (tr -s '[:space:]+ ' '\n' < /boot/cmdline.txt ) | grep -qq '^cgroup_enable=memory$'
  register: cgroup_enable_memory
  failed_when:  false
  changed_when: false
  
- name: check cmdline cgroup_memory=1
  shell: (tr -s '[:space:]+ ' '\n' < /boot/cmdline.txt ) | grep -qq '^cgroup_memory=1$'
  register: cgroup_memory_1
  failed_when:  false
  changed_when: false
  
- name: add   cmdline cgroup_enable=* if needed
  shell: "{{ item }}"
  args:
    warn: false
  when: cgroup_enable_cpuset.rc != 0 or cgroup_enable_memory.rc != 0
  with_items:
  - cp -pf /boot/cmdline.txt /tmp/cmdline.txt
  - (tr -s '[:space:]+ ' '\n' < /tmp/cmdline.txt | sed '/^cgroup_enable=.*$/d;' ; printf "\ncgroup_enable=cpuset\ncgroup_enable=memory\n" ) | tr -s '\n' ' ' | sed 's/^\s*//; s/\s*$//' > /boot/cmdline.txt
  - rm -f /tmp/cmdline.txt
  become: true
  
- name: add   cmdline cgroup_memory=1 if needed
  shell: "{{ item }}"
  args:
    warn: false
  when: cgroup_memory_1.rc != 0
  with_items:
  - cp -pf /boot/cmdline.txt /tmp/cmdline.txt
  - (tr -s '[:space:]+ ' '\n' < /tmp/cmdline.txt | sed '/^cgroup_memory=.*$/d;' ; printf "\ncgroup_memory=1\n" ) | tr -s '\n' ' ' | sed 's/^\s*//; s/\s*$//' > /boot/cmdline.txt
  - rm -f /tmp/cmdline.txt
  become: true
  
# reboot if needed
- name: reboot on change
  reboot:
  when: cgroup_enable_cpuset.rc != 0 or cgroup_enable_memory.rc != 0 or cgroup_memory_1.rc != 0
  become: true
  
# Install docker repository
- name: Install package to manage access to https repositories
  apt:
    name:  "{{ packages }}"
    state:  present
    update_cache: yes
    autoremove: yes
    force_apt_get: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - gnupg-agent
    - software-properties-common
  become: true
  
- name: Add an apt signing key for Docker repo
  apt_key:
    url:   "https://download.docker.com/linux/{{ docker.repository.dist }}/gpg"
    state: present
  become: true
  
- name: Add apt Docker repo
  apt_repository:
    repo: deb [arch={{ docker.repository.deb_arch }}] https://download.docker.com/linux/{{ docker.repository.dist }} {{ docker.repository.version }} {{ docker.repository.channel }}
    state: present
  become: true
  
# Install docker packages
- name: Install docker and its dependencies
  apt: 
    name: "docker-ce"
    state: present
    update_cache: yes
    autoremove: yes
    force_apt_get: yes
    install_recommends: no
  notify:
    - docker status
  become: true
  
- name: Ensures /etc/docker dir exists
  file: 
    path:  /etc/docker
    state: directory
  become: true
  
- name: Copy docker daemon.json on server to /etc/docker
  template:
    src:   docker-daemon.j2
    dest:  /etc/docker/daemon.json
    owner: root
    group: docker
    mode: '0644'
  register: daemon
  become: true
  
- name: restart service docker
  systemd:
    state: restarted
    daemon_reload: yes
    name:  docker
  when: daemon.changed
  notify:
  - docker status
  become: true
  
# add docker group to work_users
- name: Determine available users
  getent:
    database: passwd
  register:   users
  
- name: add docker group to work_users
  user:
    name: '{{ item }}'
    groups: docker
    append: yes
  when: item in users
  with_items: "{{ work_users }}"
  become: true
  