---
- name: execute ceph mon dump command
  shell:            "ceph mon dump --format json"
  register:         ceph_mon_dump_command
  changed_when:     false
  become:           true
  
- name: set_fact ceph_volumes
  set_fact:
    ceph_mon:       "{{ ceph_mon_dump_command.stdout | from_json }}"
  
- name: get k8s ceph key
  shell:            "ceph auth print-key client.{{ ceph.rbd_pool.user }}"
  register:         ceph_auth_key_command
  changed_when:     false
  become:           true
  
- name: set_fact ceph_k8s_key
  set_fact:
    ceph_k8s_key:   "{{ ceph_auth_key_command.stdout }}"
  
- name: Ensures /root/k8s dir exists
  file: 
    path:           "/root/k8s"
    state:          directory
    owner:          root
    group:          root
    mode:           '0755'
  become:           true
  
- name: Build csi rdb provisioner deployment files
  block:
  - name: create temporary folder
    tempfile:
      state:        directory
      suffix:       csi
    register:       csi_tmp_dir
    changed_when:   false
    
  - name: Generate ceph-csi storage class file
    template:
      src:          "k8s-csi-rbd-storage-class.yml.j2"
      dest:         "/root/k8s/k8s-csi-rbd-storage-class.yml"
    
  - name: download ceph-csi deployment files
    get_url:
      url:          "https://raw.githubusercontent.com/ceph/ceph-csi/v{{ ceph_csi_version }}/{{ item }}"
      dest:         "{{ csi_tmp_dir.path }}/{{ item }}.origin"
      force:        true
    with_items:     "{{ ceph_csi_files }}"
    changed_when:   false
    
  - name: add namespace to ceph-csi deployment files
    shell:  |
        awk -v  namespace='{{ namespace }}'                 \
               'BEGIN {m=0; n=0;}                           \
                {                                           \
                    p=1;                                    \
                    if ( $0 ~ /^metadata:/ ) {              \
                        m=1; n=0;                           \
                    }                                       \
                    else if (m && $0 ~ /^[^ ]/ ) {          \
                        if (m && !n) {                      \
                            print "  namespace:",namespace; \
                        }                                   \
                        m=0; n=0;                           \
                    }                                       \
                    if ( $0 ~ /^  namespace:/ ) {           \
                        print "  namespace:",namespace;     \
                        p=0; n=1;                           \
                    } else if ($0 ~ /^    namespace:/ ) {   \
                        print "    namespace:",namespace;   \
                        p=0;                                \
                    }                                       \
                }p;                                         \
                END {                                       \
                    if (m && !n) {                          \
                        print "  namespace:",namespace;     \
                    }                                       \
                }' {{ csi_tmp_dir.path }}/{{ item | basename }}.origin > {{ csi_tmp_dir.path }}/{{ item | basename }}
    with_items:     "{{ ceph_csi_files }}"
    changed_when:   false
    
  - name: update ingress-nginx container image to 2 replicas
    replace:
      path:         "{{ csi_tmp_dir.path }}/{{ item | basename }}"
      regexp:       "replicas: [0-9]+"
      replace:      "replicas: {{ groups['all'] | length }}"
    with_items:     "{{ ceph_csi_files }}"
    when:           groups['worker'] | length < 3 
    changed_when:   false
    
  - name: copy ceph-csi rbd deployment files
    copy:
      remote_src:   yes
      src:          "{{ csi_tmp_dir.path }}/{{ item | basename }}"
      dest:         "/root/k8s/{{ item | basename }}"
      owner:        root
      group:        root
      mode:         '0644'
    with_items:     "{{ ceph_csi_files }}"
    
  - name: apply ceph-csi rbd storage class deployment file
    shell:          "kubectl apply -f '/root/k8s/k8s-csi-rbd-storage-class.yml'"
    
  - name: apply ceph-csi rbd deployment files
    shell:          "kubectl apply -f '/root/k8s/{{ item | basename }}'"
    with_items:     "{{ ceph_csi_files }}"
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ csi_tmp_dir.path }}"
      state:        absent
    when:           csi_tmp_dir is defined
    changed_when:   false
  
  become:           true
  
